#alloc frameBuffer[0x3000]: u8
#const FRAME_BUFFER_SIZE 0x3000
#alloc machineMemory[0x10000]: u8

export const FRAME_CYCLE_COUNT:u32 = 69888;

#regpair AF A F
#regpair BC B C
#regpair DE D E
#regpair HL H L
#regpair AF_
#regpair BC_
#regpair DE_
#regpair HL_
#regpair IX IXH IXL
#regpair IY IYH IYL
#regpair SP
#regpair IR I R

#const FLAG_C 0x01
#const FLAG_N 0x02
#const FLAG_P 0x04
#const FLAG_V 0x04
#const FLAG_3 0x08
#const FLAG_H 0x10
#const FLAG_5 0x20
#const FLAG_Z 0x40
#const FLAG_S 0x80

#alloc halfcarryAddTable[8]: u8
halfcarryAddTable = [0, FLAG_H, FLAG_H, FLAG_H, 0, 0, 0, FLAG_H];

#alloc halfcarrySubTable[8]: u8
halfcarrySubTable = [0, 0, FLAG_H, 0, FLAG_H, 0, FLAG_H, FLAG_H];

#alloc overflowAddTable[8]: u8
overflowAddTable = [0, 0, 0, FLAG_V, FLAG_V, 0, 0, 0];
#alloc overflowSubTable[8]: u8
overflowSubTable = [0, FLAG_V, 0, 0, 0, 0, FLAG_V, 0];

#alloc sz53Table[0x100]: u8
#alloc parityTable[0x100]: u8
#alloc sz53pTable[0x100]: u8

const SCREEN_EVENT_COUNT:u16 = 3072;
const SCREEN_EVENTS_SIZE:u16 = SCREEN_EVENT_COUNT * 3;
#alloc screenEvents[9216]: u16

let i:u8 = 0;
while (true) {
    sz53Table[i] = u8(i) & ( FLAG_3 | FLAG_5 | FLAG_S );
    let j = i;
    let parity:u8 = 0;
    for (let k:i8 = 0; k < 8; k++) {
        parity ^= j & 1;
        j >>= 1;
    }

    parityTable[i] = (parity ? 0 : FLAG_P);
    sz53pTable[i] = sz53Table[i] | parityTable[i];

    sz53Table[0] |= FLAG_Z;
    sz53pTable[0] |= FLAG_Z;
    i++;
    if (i == 0) break;
}

/* build screen events table: a list of which screen bytes should be fetched on which
t-states. A sequence of: tstate number, screen address offset, attr address offset */
let screenEventPointer:u32 = 0;
for (let i:u16 = 0; i < SCREEN_EVENT_COUNT; i++) {
    screenEvents[screenEventPointer++] = 14335 + 224 * (i >> 4) + 8 * (i & 0x0f);
    screenEvents[screenEventPointer++] = ((i & 0x0c0f) << 1) | ((i & 0x0070) << 4) | ((i & 0x0380) >> 2);
    screenEvents[screenEventPointer++] = 0x1800 | ((i & 0x0f80) >> 2) | ((i & 0x000f) << 1);
}

let t:u32 = 0;
let pc:u16 = 0;
let iff1:bool = 0;
let iff2:bool = 0;
let im:u8 = 0;
let interruptible:bool = false;
let opcodePrefix:u8 = 0;
let framebufferIndex = 0;

function readMem(addr:u16):u8 {
    t += 3;
    return machineMemory[addr];
}

function writeMem(addr:u16, val:u8):void {
    t += 3;
    if (addr >= 0x4000 && addr < 0x5b00) {
        updateFramebuffer();
    }
    if (addr & 0xc000) {
        machineMemory[addr] = val;
    }
}

function updateFramebuffer():void {
    /* process all of the screen bytes that are due up to the current tstate */
    while (screenEventPointer < SCREEN_EVENTS_SIZE && screenEvents[screenEventPointer] <= t) {
        const screenAddr:u16 = 0x4000 | screenEvents[screenEventPointer + 1];
        const attributeAddr:u16 = 0x4000 | screenEvents[screenEventPointer + 1];
        frameBuffer[framebufferIndex++] = machineMemory[screenAddr];
        frameBuffer[framebufferIndex++] = machineMemory[attributeAddr];
        frameBuffer[framebufferIndex++] = machineMemory[screenAddr + 1];
        frameBuffer[framebufferIndex++] = machineMemory[attributeAddr + 1];
        screenEventPointer += 3;
    }
}

export function runFrame():i16 {
    screenEventPointer = 0;
    framebufferIndex = 0;

    while (t < FRAME_CYCLE_COUNT) {
        interruptible = true; // unless overridden by opcode
        let op:u8 = readMem(pc++);
        t++;  // 1T to decode in addition to the memory read
        if (opcodePrefix == 0) {
            switch (op) {
                #op 00 NOP
                #op 01 LD BC,nn
                #op 03 INC BC
                #op 04 INC B
                #op 05 DEC B
                #op 06 LD B,n
                #op 09 ADD HL,BC
                #op 0b DEC BC
                #op 0c INC C
                #op 0d DEC C
                #op 0e LD C,n

                #op 11 LD DE,nn
                #op 13 INC DE
                #op 14 INC D
                #op 15 DEC D
                #op 16 LD D,n
                #op 19 ADD HL,DE
                #op 1b DEC DE
                #op 1c INC E
                #op 1d DEC E
                #op 1e LD E,n

                #op 20 JR NZ,n
                #op 21 LD HL,nn
                #op 22 LD (nn),HL
                #op 23 INC HL
                #op 24 INC H
                #op 25 DEC H
                #op 26 LD H,n
                #op 28 JR Z,n
                #op 29 ADD HL,HL
                #op 2a LD HL,(nn)
                #op 2b DEC HL
                #op 2c INC L
                #op 2d DEC L
                #op 2e LD L,n

                #op 30 JR NC,n
                #op 31 LD SP,nn
                #op 32 LD (nn),A
                #op 33 INC SP
                #op 34 INC (HL)
                #op 35 DEC (HL)
                #op 36 LD (HL),n
                #op 38 JR C,n
                #op 39 ADD HL,SP
                #op 3b DEC SP
                #op 3c INC A
                #op 3d DEC A
                #op 3e LD A,n

                #op 40 LD B,B
                #op 41 LD B,C
                #op 42 LD B,D
                #op 43 LD B,E
                #op 44 LD B,H
                #op 45 LD B,L
                #op 46 LD B,(HL)
                #op 47 LD B,A
                #op 48 LD C,B
                #op 49 LD C,C
                #op 4a LD C,D
                #op 4b LD C,E
                #op 4c LD C,H
                #op 4d LD C,L
                #op 4e LD C,(HL)
                #op 4f LD C,A

                #op 50 LD D,B
                #op 51 LD D,C
                #op 52 LD D,D
                #op 53 LD D,E
                #op 54 LD D,H
                #op 55 LD D,L
                #op 56 LD D,(HL)
                #op 57 LD D,A
                #op 58 LD E,B
                #op 59 LD E,C
                #op 5a LD E,D
                #op 5b LD E,E
                #op 5c LD E,H
                #op 5d LD E,L
                #op 5e LD E,(HL)
                #op 5f LD E,A

                #op 60 LD H,B
                #op 61 LD H,C
                #op 62 LD H,D
                #op 63 LD H,E
                #op 64 LD H,H
                #op 65 LD H,L
                #op 66 LD H,(HL)
                #op 67 LD H,A
                #op 68 LD L,B
                #op 69 LD L,C
                #op 6a LD L,D
                #op 6b LD L,E
                #op 6c LD L,H
                #op 6d LD L,L
                #op 6e LD L,(HL)
                #op 6f LD L,A

                #op 78 LD A,B
                #op 79 LD A,C
                #op 7a LD A,D
                #op 7b LD A,E
                #op 7c LD A,H
                #op 7d LD A,L
                #op 7e LD A,(HL)
                #op 7f LD A,A

                #op a0 AND B
                #op a1 AND C
                #op a2 AND D
                #op a3 AND E
                #op a4 AND H
                #op a5 AND L
                #op a6 AND (HL)
                #op a7 AND A
                #op a8 XOR B
                #op a9 XOR C
                #op aa XOR D
                #op ab XOR E
                #op ac XOR H
                #op ad XOR L
                #op af XOR A

                #op b0 OR B
                #op b1 OR C
                #op b2 OR D
                #op b3 OR E
                #op b4 OR H
                #op b5 OR L
                #op b7 OR A
                #op b8 CP B
                #op b9 CP C
                #op ba CP D
                #op bb CP E
                #op bc CP H
                #op bd CP L
                #op be CP (HL)
                #op bf CP A

                #op c3 JP nn
                #op c5 PUSH BC
                #op cb prefix cb
                #op d3 OUT (n),A
                #op d5 PUSH DE
                #op d9 EXX
                #op dd prefix dd
                #op e5 PUSH HL
                #op eb EX DE,HL
                #op ed prefix ed
                #op f3 DI
                #op f5 PUSH AF
                #op f9 LD SP,HL
                #op fb EI
                #op fd prefix fd

                default:
                    return op;
            }
        } else if (opcodePrefix == 0xdd) {
            switch (op) {
                #op 21 LD IX,nn
                #op 22 LD (nn),IX
                #op 23 INC IX
                #op 2a LD IX,(nn)
                #op 2b DEC IX
                #op 34 INC (IX+n)
                #op 35 DEC (IX+n)
                #op 46 LD B,(IX+n)
                #op 4e LD C,(IX+n)
                #op 56 LD D,(IX+n)
                #op 5e LD E,(IX+n)
                #op 66 LD H,(IX+n)
                #op 6e LD L,(IX+n)
                #op 7e LD A,(IX+n)
                #op a6 AND (IX+n)
                #op be CP (IX+n)
                #op e5 PUSH IX
                #op f9 LD SP,IX

                default:
                    return i16(0xd00) | i16(op);
            }
            opcodePrefix = 0;
        } else if (opcodePrefix == 0xed) {
            switch (op) {
                #op 42 SBC HL,BC
                #op 43 LD (nn),BC
                #op 46 IM 0
                #op 47 LD I,A
                #op 4b LD BC,(nn)
                #op 52 SBC HL,DE
                #op 53 LD (nn),DE
                #op 56 IM 1
                #op 5b LD DE,(nn)
                #op 5e IM 2
                #op 62 SBC HL,HL
                #op 6b LD HL,(nn)
                #op 72 SBC HL,SP
                #op 73 LD (nn),SP
                #op b0 LDIR
                #op b8 LDDR

                default:
                    return i16(0xe00) | i16(op);
            }
            opcodePrefix = 0;
        } else if (opcodePrefix == 0xfd) {
            switch (op) {
                #op 21 LD IY,nn
                #op 22 LD (nn),IY
                #op 23 INC IY
                #op 2a LD IY,(nn)
                #op 2b DEC IY
                #op 34 INC (IY+n)
                #op 35 DEC (IY+n)
                #op 46 LD B,(IY+n)
                #op 4e LD C,(IY+n)
                #op 56 LD D,(IY+n)
                #op 5e LD E,(IY+n)
                #op 66 LD H,(IY+n)
                #op 6e LD L,(IY+n)
                #op 7e LD A,(IY+n)
                #op a6 AND (IY+n)
                #op be CP (IY+n)
                #op e5 PUSH IY
                #op f9 LD SP,IY

                default:
                    return i16(0xf00) | i16(op);
            }
            opcodePrefix = 0;
        }
    }
    updateFramebuffer();
    t -= FRAME_CYCLE_COUNT;

    return -1;
}
